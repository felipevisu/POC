pipeline {
    agent {
        kubernetes {
            yaml '''
                apiVersion: v1
                kind: Pod
                spec:
                  containers:
                  - name: docker
                    image: docker:latest
                    command:
                    - cat
                    tty: true
                    volumeMounts:
                    - mountPath: /var/run/docker.sock
                      name: docker-sock
                  - name: kubectl
                    image: bitnami/kubectl:latest
                    command:
                    - cat
                    tty: true
                  volumes:
                  - name: docker-sock
                    hostPath:
                      path: /var/run/docker.sock
            '''
        }
    }
    
    environment {
        DOCKER_REGISTRY = "${env.DOCKER_REGISTRY ?: 'localhost:5000'}"
        IMAGE_NAME = "sample-application"
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        APP_NAMESPACE = "app"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                script {
                    // Get the commit hash for tagging
                    env.GIT_COMMIT_HASH = sh(
                        script: 'git rev-parse --short HEAD',
                        returnStdout: true
                    ).trim()
                    env.IMAGE_TAG = "${env.BUILD_NUMBER}-${env.GIT_COMMIT_HASH}"
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                container('docker') {
                    script {
                        // Build the Docker image
                        sh """
                            cd sample-application
                            docker build -t ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} .
                            docker tag ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                        """
                    }
                }
            }
        }
        
        stage('Test Application') {
            steps {
                container('docker') {
                    script {
                        // Run basic tests (modify based on your application)
                        sh """
                            cd sample-application
                            # Example: Run Python tests
                            docker run --rm ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} python -m pytest --version || echo "No tests configured"
                        """
                    }
                }
            }
        }
        
        stage('Push to Registry') {
            steps {
                container('docker') {
                    script {
                        // Push the image to registry
                        withCredentials([usernamePassword(
                            credentialsId: env.DOCKER_CREDENTIALS_ID ?: 'docker-registry-creds',
                            usernameVariable: 'DOCKER_USERNAME',
                            passwordVariable: 'DOCKER_PASSWORD'
                        )]) {
                            sh """
                                echo \$DOCKER_PASSWORD | docker login ${DOCKER_REGISTRY} -u \$DOCKER_USERNAME --password-stdin
                                docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
                                docker push ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest
                            """
                        }
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                container('kubectl') {
                    script {
                        // Apply Kubernetes manifests
                        sh """
                            # Create deployment manifest
                            cat > deployment.yaml << EOF
                            apiVersion: apps/v1
                            kind: Deployment
                            metadata:
                              name: sample-application
                              namespace: ${APP_NAMESPACE}
                              labels:
                                app: sample-application
                                version: "${IMAGE_TAG}"
                            spec:
                              replicas: 2
                              selector:
                                matchLabels:
                                  app: sample-application
                              template:
                                metadata:
                                  labels:
                                    app: sample-application
                                    version: "${IMAGE_TAG}"
                                spec:
                                  serviceAccountName: app-service-account
                                  containers:
                                  - name: sample-app
                                    image: ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}
                                    ports:
                                    - containerPort: 8000
                                    resources:
                                      requests:
                                        cpu: 100m
                                        memory: 128Mi
                                      limits:
                                        cpu: 500m
                                        memory: 512Mi
                                    env:
                                    - name: ENV
                                      value: "production"
                                    livenessProbe:
                                      httpGet:
                                        path: /
                                        port: 8000
                                      initialDelaySeconds: 30
                                      periodSeconds: 10
                                    readinessProbe:
                                      httpGet:
                                        path: /
                                        port: 8000
                                      initialDelaySeconds: 5
                                      periodSeconds: 5
                            ---
                            apiVersion: v1
                            kind: Service
                            metadata:
                              name: sample-application
                              namespace: ${APP_NAMESPACE}
                              labels:
                                app: sample-application
                            spec:
                              type: ClusterIP
                              ports:
                              - port: 80
                                targetPort: 8000
                                protocol: TCP
                              selector:
                                app: sample-application
                            EOF
                            
                            # Apply the manifests
                            kubectl apply -f deployment.yaml
                            
                            # Wait for deployment to be ready
                            kubectl rollout status deployment/sample-application -n ${APP_NAMESPACE} --timeout=300s
                        """
                    }
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                container('kubectl') {
                    script {
                        // Verify the deployment
                        sh """
                            echo "=== Deployment Status ==="
                            kubectl get deployment sample-application -n ${APP_NAMESPACE}
                            
                            echo "=== Pod Status ==="
                            kubectl get pods -l app=sample-application -n ${APP_NAMESPACE}
                            
                            echo "=== Service Status ==="
                            kubectl get service sample-application -n ${APP_NAMESPACE}
                            
                            echo "=== Application Logs ==="
                            kubectl logs -l app=sample-application -n ${APP_NAMESPACE} --tail=50
                        """
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Clean up
            container('docker') {
                sh """
                    docker rmi ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} || true
                    docker rmi ${DOCKER_REGISTRY}/${IMAGE_NAME}:latest || true
                """
            }
        }
        success {
            echo "✅ Pipeline completed successfully!"
            echo "🚀 Application deployed to namespace: ${APP_NAMESPACE}"
            echo "🔗 Image: ${DOCKER_REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}"
        }
        failure {
            echo "❌ Pipeline failed. Check the logs for details."
        }
    }
}
